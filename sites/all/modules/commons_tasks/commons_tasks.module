<?php
/**
 * @file
 * Code for the Commons Tasks feature.
 */

include_once 'commons_tasks.features.inc';

/**
 * Implements hook_menu_alter().
 */
function commons_tasks_menu_alter(&$items) {
  $items['casetracker']['page callback']
    = 'commons_tasks_redirect_case_to_tasks';
  $items['casetracker/my']['page callback']
    = 'commons_tasks_redirect_case_to_tasks';
  $items['casetracker/projects']['page callback']
    = 'commons_tasks_redirect_case_to_tasks';
}

/**
 * Redirect casetracker to tasks.
 */
function commons_tasks_redirect_case_to_tasks() {
  drupal_goto('tasks');
}

/**
* Implements hook_commons_bw_group_widget().
*/
function commons_tasks_commons_bw_group_widget() {
  return array(
    'commons_tasks' => array(
      'title' => 'Tasks',
      'type' => 'view',
      'vid' => 'commons_bw_tasks',
      'display' => 'default',
      'weight' => -1,
    ),
  );
}

/**
 * Implements hook_commons_bw_create_all_widget().
 */
function commons_tasks_commons_bw_create_all_widget($group) {
  if (og_user_access('node', $group->nid, 'create task content')) {
    $link = l(t('Create a task'),"node/add/task/$group->nid",
    array('attributes' => array('class' => 'commons-tasks-create'), 'query' => array('destination' => '', 'og_group_ref' => $group->nid))
    );
    return array(
      'casetracker' => array(
        'default' => TRUE,
        'link' => $link,
        'text' =>  t('Collaborate with others using tasks'),
        '#weight' => -1,
      ),
    );
  }
}

/**
 * Implements hook_commons_entity_integration.
 */
function commons_tasks_commons_entity_integration() {
  return array(
    'node' => array(
      'task' => array(
      ),
    ),
  );
}

/**
* Implements hook_views_pre_render().
*/
function commons_tasks_views_pre_render(&$view) {
  if ($view->name == 'commons_bw_tasks') {
    $group_id = $view->args[0];
    if (og_user_access('node', $group_id, 'create task content')) {
      $view->attachment_before = l(t('Create a task'), 'node/add/task', array('query' => array('og_group_ref' => $group_id)));
    }
  }
}

/**
* Implements hook_strongarm_alter().
*/
 function commons_tasks_strongarm_alter(&$items) {
  // Expose the Task content type for 'liking' via the Commons_like module
  // by altering the configuration for the Rate.module widget that it provides.
  if (!empty($items['rate_widgets']->value)) {
    foreach($items['rate_widgets']->value as $key => $widget) {
      if ($widget->name == 'commons_like') {
        if (!in_array('task', $items['rate_widgets']->value[$key]->node_types)) {
          $items['rate_widgets']->value[$key]->node_types[] = 'task';
        }
        if (!in_array('task', $items['rate_widgets']->value[$key]->comment_types)) {
          $items['rate_widgets']->value[$key]->comment_types[] = 'task';
        }
      }
    }
  }
  // Expose the task content type for integration with Commons Radioactivity
  // and Commons Groups.
  foreach (array('commons_radioactivity_entity_types', 'commons_groups_entity_types') as $key) {
    if (isset($items[$key])) {
      $items[$key]->value['node']['task'] = 1;
    }
  }
}

/**
 * Implements hook_node_update().
 */
function commons_tasks_node_update($node) {
  if ($node->type === 'task') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $original_wrapper = entity_metadata_wrapper('node', $node->original);
    $assignee = $wrapper->field_assignee[0]->value();
    $assignee_original = $original_wrapper->field_assignee[0]->value();
    if ($assignee) {
      $send = TRUE;
      // Check if we had an original assignee and if they are different.
      if ($assignee_original && ($assignee->uid === $assignee_original->uid)) {
        $send = FALSE;
      }
      if ($send) {
        $params['account'] = $assignee;
        $params['node'] = $node;
        drupal_mail('commons_tasks', 'assignee_notification', $assignee->mail, user_preferred_language($assignee), $params);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function commons_tasks_node_insert($node) {
  if ($node->type === 'task') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $assignee = $wrapper->field_assignee[0]->value();
    if ($assignee) {
      $params['account'] = $assignee;
      $params['node'] = $node;
      drupal_mail('commons_tasks', 'assignee_notification', $assignee->mail, user_preferred_language($assignee), $params);
    }
  }
}

/**
 * Implements hook_mail().
 */
function commons_tasks_mail($key, &$message, $params) {
  if ($key === 'assignee_notification') {
    $language = $message['language'];
    $variables = array(
     'user' => $params['account'],
     'node' => $params['node'],
    );

    // Get standard variables.
    $subject_default = variable_get_value('common_tasks_assignee_notification_subject');
    $body_default = variable_get_value('common_tasks_assignee_notification_body');

    // Get replaced variables.
    $subject = token_replace($subject_default, $variables);
    $body = token_replace($body_default, $variables);
    $message['subject'] .= $subject;
    $message['body'][] = $body;
  }
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by commons_tasks_mail() and the settings forms to retrieve strings.
 */
function _commons_tasks_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $subject = variable_get_value('common_tasks_assignee_notification_subject');
  $body = variable_get_value('common_tasks_assignee_notification_subject');
}

/**
 * Implements hook_views_query_alter()
 */
function commons_tasks_views_query_alter(&$view, &$query) {
  if ($view->name == 'commons_tasks_casetracker_project_cases'
    && ($view->current_display == 'page_2')) {
    global $user;
    $field_to_override = 'field_data_field_assignee.field_assignee_target_id';
    $conditions = &$query->where[1]['conditions'];
    foreach ($conditions as $key => $condition) {
      if ($condition['field'] === $field_to_override) {
        $conditions[$key]['value'] = $user->uid;
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter()
 */
 function commons_tasks_module_implements_alter(&$implementations, $hook) {
   if ($hook == 'views_query_alter') {
     $group = $implementations['commons_tasks'];
     unset($implementations['commons_tasks']);
     $implementations['commons_tasks'] = $group;
   }
 }
