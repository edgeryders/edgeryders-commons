<?php
/**
 * @file
 *   A simple Groups Audience token for Organic Groups.
 */

/**
 * Implements hook_token_info().
 */
function og_token_token_info() {
  $info = array();

  $info['tokens']['node']['og-group-audience'] = array(
    'name' => t('Group audience labels'),
    'description' => t('Outputs the group audience labels of a node.'),
    'type' => 'array',
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function og_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $join = isset($options['join']) ? $options['join'] : ', ';

  // Skip if we are not given a node with a group audience field.
  if ($type == 'node' && isset($data['node']->{OG_AUDIENCE_FIELD}) && !empty($data['node']->{OG_AUDIENCE_FIELD})) {
    // Loop through the given tokens.
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'og-group-audience':
          // Avoid loading the labels more than once.
          if (!isset($labels)) {
            $nodes = og_token_get_group_audience_groups($data['node']);
            $labels = og_token_get_group_labels($nodes, $options);
          }
          $replacements[$original] = implode($join, $labels);
          break;
      }
    }

    // Resolve chained token relationships.
    if ($group_audience_tokens = token_find_with_prefix($tokens, 'og-group-audience')) {
      if (!isset($labels)) {
        $nodes = og_token_get_group_audience_groups($data['node']);
        $labels = og_token_get_group_labels($nodes, $options);
      }
      $replacements += token_generate('array', $group_audience_tokens, array('array' => $labels), $options);
    }
  }
  return $replacements;
}

/**
 * Return the group labels of a given array of nodes.
 *
 * @param array $nodes
 *   An array of Organic Group group objects.
 * @param array $options
 *   An associative array of options for token replacement.
 *
 * @return array
 *   An array containing the labels of the passed in groups.
 */
function og_token_get_group_labels($nodes, $options) {
  $labels = array();
  $sanitize = !empty($options['sanitize']);

  foreach ($nodes as $group) {
    $label = drupal_get_path_alias('node/' . $group->nid);
    $labels[] = $sanitize ? check_plain($label) : $label;
  }
  return $labels;
}

/**
 * Return the groups that are referenced in the group_audience field of a node.
 *
 * @param object $node
 *   A node object.
 *
 * @return array
 *   An array of Organic Group group objects.
 */
function og_token_get_group_audience_groups($node) {
  $nodes = array();

  $group_audiences = field_get_items('node', $node, OG_AUDIENCE_FIELD);
  foreach ($group_audiences as $group_audience) {
    if (!empty($group_audience['target_id']) && $node_parent = node_load($group_audience['target_id'])) {
      $nodes[] = $node_parent;
    }
  }
  return $nodes;
}
